翻转一棵二叉树。

     4
   /   \
  2     7
 / \   / \
1   3 6   9
转换为：

     4
   /   \
  7     2
 / \   / \
9   6 3   1


 
第一次 错误写法：
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root==NULL)
            return NULL;
        TreeNode *p=root;
        p->left=invertTree(root->right);
        p->right=invertTree(root->left);
        return p;
        
        
    }
};
我想 新建一个新的结构体指针指向原来root指向的内存，然后递归交换左右结点；但是会报错，double free oｒ corruption(fasttop):***
对一个地址先后进行两次free()操作就会引起这种错误代码，我想应该是用了两个指针变量指向相同的内存导致的，然后尝试用原来的指针进行操作。
 
正确 写法
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root==NULL)
            return NULL;
        TreeNode *p=root->left;
        
        root->left=invertTree(root->right);
        root->right=invertTree(p);
        return root;
        
        
    }
};
