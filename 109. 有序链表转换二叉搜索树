给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。

本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。

示例:

给定的有序链表： [-10, -3, 0, 5, 9],

一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：

      0
     / \
   -3   9
   /   /
 -10  5
 
 
 
 
 和有序数组相比，有序链表稍显复杂，无法通过下表索引，所以需要通过快慢指针进行查找中间结点。
 /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        if(!head)return NULL;
        if(!head->next) return new TreeNode(head->val);
        ListNode*slow=head;
        ListNode*longg=slow;            //注意不可定义long，long本身就是个数据类型，不可定义这个
        ListNode*fast=head;
        while(fast->next&&fast->next->next)
        {
            longg=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        fast=slow->next;
        longg->next=NULL;
        
        TreeNode*cur=new TreeNode(slow->val);
        if(head!=slow)cur->left=sortedListToBST(head);
        cur->right=sortedListToBST(fast);
        return cur;
        
            
        
    }
};
