给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。

说明：

拆分时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
示例 1：

输入: s = "leetcode", wordDict = ["leet", "code"]
输出: true
解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"。
示例 2：

输入: s = "applepenapple", wordDict = ["apple", "pen"]
输出: true
解释: 返回 true 因为 "applepenapple" 可以被拆分成 "apple pen apple"。
     注意你可以重复使用字典中的单词。
示例 3：

输入: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
输出: false



 
运用动态规划，用bool型数组res[i]表示s中i前面元素是否可以在dict中找到（历史信息）
 Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int chang=s.size();
        vector<bool>res(chang+1,false);
        res[0]=true;
        for(int i=0;i<chang+1;++i)
        {
            for(int j=0;j<i;j++)
            {
                if(res[j]&&find(wordDict.begin(),wordDict.end(),s.substr(j,i-j))!=wordDict.end())
                {res[i]=true;break;}
                
            }
        }
        return res[chang];
        
    }
};
