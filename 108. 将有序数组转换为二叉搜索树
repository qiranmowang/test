将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。

本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。

示例:

给定有序数组: [-10,-3,0,5,9],

一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：

      0
     / \
   -3   9
   /   /
 -10  5
 
 
 
 对于有序数组，这个其实就是二分查找，找左右中间的数字放在两边就ok
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return sortedarry(nums,0,nums.size()-1);
        
    }
    TreeNode* sortedarry(vector<int>&nums,int left,int right)
    {
        if(left>right)return NULL;
        int mid=(left+right)/2;
        TreeNode*cur=new TreeNode(nums[mid]);
        cur->left=sortedarry(nums,left,mid-1);         //注意第一次我把参数left写成0，这是不对的，因为这是一个递归函数，有很多个左子树，包括第一次
        cur->right=sortedarry(nums,mid+1,right);         分开后右子树中的左子树，所以left不一定等于0，事实上很多都不等于0，说明还不理解递归。 
        return cur;
    }
};
